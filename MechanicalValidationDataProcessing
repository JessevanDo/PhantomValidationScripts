import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tkinter import Tk, filedialog
from scipy import stats
from matplotlib import rcParams
from scipy.signal import savgol_filter

def select_excel_file():
    root = Tk()
    root.withdraw()  # Hide the main window
    file_path = filedialog.askopenfilename(
        title="Select Excel File",
        filetypes=[("Excel files", "*.xlsx *.xls")]
    )
    return file_path


def plot(file_path, cmap_name):
    excel_data = pd.ExcelFile(file_path)
    samples_max_load = []
    stable_load = []
    samples_count = 0
    rcParams['font.family'] = 'Times New Roman'
    rcParams['font.size'] = 16

    # Filter samples with dual penetration or no penetration (due to following pre-existent trajectory or tear).
    # Adjust Force and Time threshold as needed.
    for sheet_name in excel_data.sheet_names:
        sample_data = pd.read_excel(file_path, sheet_name=sheet_name)

        # Preprocess data
        sample_data = sample_data[(sample_data['Load (N)'] >= 0) & (sample_data['Displacement (mm)'] <= 40)]

        if (sample_data['Load (N)'] < 0.01).all():
            print(f"Sample {sheet_name} excluded due to low overall Load.")
            continue

        penetrationForceThreshold = 0.08
        penetrationDisplacementThresholdLower = 14
        penetrationDisplacementThresholdUpper = 20
        filtered_data = sample_data[(sample_data['Displacement (mm)'] >= penetrationDisplacementThresholdLower) & (sample_data['Displacement (mm)'] <= penetrationDisplacementThresholdUpper)]
        if not filtered_data[filtered_data['Load (N)'] >= penetrationForceThreshold].empty:
            print(f"Sample {sheet_name} excluded due to double penetration peaks.")
            continue

        # Count sample
        print(f"{sheet_name} included!")
        samples_count = samples_count + 1

        # Capture penetration peaks
        peak_threshold_upper = 15
        peak_data = sample_data[sample_data['Displacement (mm)'] < peak_threshold_upper]
        max_load = peak_data['Load (N)'].max()
        samples_max_load.append((sheet_name, max_load))

        # Capture stable loads. Amend stability threshold if necessary. Filter out values under 0.
        stable_threshold_lower = 15
        stable_threshold_upper = 40
        stable_load_data = sample_data[(sample_data['Displacement (mm)'] >= stable_threshold_lower) & (sample_data['Displacement (mm)'] <= stable_threshold_upper)]
        stable_load_data = stable_load_data[stable_load_data['Load (N)'] >= 0]

        if not stable_load_data.empty:
            stable_load.append(stable_load_data['Load (N)'].values)

    # Sort samples based on maximum load
    sorted_samples = sorted(samples_max_load, key=lambda x: x[1], reverse=False)

    # Report amount of samples
    print(f"Amount of valid samples is {samples_count}")

    # Calculate mean penetration peaks
    max_load_values = [load for _, load in sorted_samples]
    mean_max_load = np.mean(max_load_values)
    std_max_load = np.std(max_load_values)
    median_max_load = np.median(max_load_values)
    Q1_max_load = np.percentile(max_load_values, 25)
    Q3_max_load = np.percentile(max_load_values, 75)
    IQR_max_load = Q3_max_load - Q1_max_load

    print(f"Mean penetration peak: {mean_max_load:.4f} N")
    print(f"SD +/-: {std_max_load:.4f} N")
    print(f"Median penetration peak: {median_max_load} N")
    print(f"IQR: {IQR_max_load} N")

    # Test maximum load for normality using Shapiro-Wilk test
    shapiro_test_peak = stats.shapiro(max_load_values)
    print(f"Shapiro-Wilk Test: W={shapiro_test_peak.statistic:.4f}, p-value={shapiro_test_peak.pvalue:.4f}")

    # Test maximum load with Kolmogorov-Smirnov Test for normality
    ks_test_peak = stats.kstest(max_load_values, 'norm', args=(mean_max_load, std_max_load))
    print(f"Kolmogorov-Smirnov Test: D={ks_test_peak.statistic:.4f}, p-value={ks_test_peak.pvalue:.4f}")

    # Plot histogram of maximum loads
    plt.figure(figsize=(10, 6))
    plt.hist(max_load_values, bins=10, color='blue', edgecolor='black')
    plt.xlabel('Maximum Load (N)')
    plt.ylabel('Frequency')
    plt.title('Histogram of Maximum Loads')
    plt.grid(True)
    plt.show()

    # Calculate mean and median load of stable phase +/- IQR/SD
    stable_load_values = np.concatenate(stable_load)
    mean_stable_load = np.mean(stable_load_values)
    std_mean_stable_load = np.std(stable_load_values)
    median_mean_stable_load = np.median(stable_load_values)
    Q1_mean_stable_load = np.percentile(stable_load_values, 25)
    Q3_mean_stable_load = np.percentile(stable_load_values, 75)
    IQR_mean_stable_load = Q3_mean_stable_load - Q1_mean_stable_load

    print(f"Mean load in stable phase: {mean_stable_load:.4f} N")
    print(f"SD: {std_mean_stable_load:.4f} N")
    print(f"Median load in stable phase: {median_mean_stable_load} N")
    print(f"IQR: {IQR_mean_stable_load}")

    # Test stable load for normality using Shapiro-Wilk test
    shapiro_test_stable = stats.shapiro(stable_load_values)
    print(f"Shapiro-Wilk Test: W={shapiro_test_stable.statistic:.4f}, p-value={shapiro_test_stable.pvalue:.4f}")

    # Test stable load with Kolmogorov-Smirnov Test for normality
    ks_test_stable = stats.kstest(stable_load_values, 'norm', args=(stable_load_values, std_mean_stable_load))
    print(f"Kolmogorov-Smirnov Test: D={ks_test_stable.statistic:.4f}, p-value={ks_test_stable.pvalue:.4f}")

    # Plot histogram of stable loads
    plt.figure(figsize=(10, 6))
    plt.hist(stable_load_values, bins=10, color='blue', edgecolor='black')
    plt.xlabel('Load (N)')
    plt.ylabel('Frequency')
    plt.grid(True)
    plt.show()

    # Get the color map for plot
    cmap = plt.get_cmap(cmap_name)
    num_samples = len(sorted_samples)

    # Plot valid samples
    plt.figure(figsize=(10, 6))

    for i, (sheet_name, max_load) in enumerate(sorted_samples):
        sample_data = pd.read_excel(file_path, sheet_name=sheet_name)
        color = cmap(i / num_samples)  # Get the color from the colormap

        # Apply Savitsky-Golay filter to smooth graphs
        smoothed_load = savgol_filter(sample_data['Load (N)'], window_length=10, polyorder=2)
        plt.plot(sample_data['Displacement (mm)'], smoothed_load, color=color)

    plt.xlabel('Insertion (mm)')
    plt.ylabel('Load (N)')
    plt.xlim([0, 40])
    plt.ylim([0, 0.14])
    plt.grid(True)
    plt.show()

if __name__ == "__main__":
    file_path = select_excel_file()
    if file_path:
        plot(file_path, 'viridis')
    else:
        print("No file selected.")
